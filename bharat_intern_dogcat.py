# -*- coding: utf-8 -*-
"""bharat_intern_dogcat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12_AHK_w57TYwlzkWOuKVie0ez2MmdkPI
"""

# Set up Kaggle API for downloading the dataset
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d salader/dogs-vs-cats

# Extract the downloaded dataset
import zipfile
zip_ref = zipfile.ZipFile('/content/dogs-vs-cats.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

# Make necessary imports
import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,BatchNormalization,Dropout

# generators
# Load the training and validation datasets using TensorFlow's image_dataset_from_directory
train_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/train',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(256,256)
)

validation_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/test',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(256,256)
)

# Normalize the pixel values of images
def process(image,label):
    image = tf.cast(image/255. ,tf.float32)
    return image,label

train_ds = train_ds.map(process)
validation_ds = validation_ds.map(process)

# Create a convolutional neural network (CNN) model

model = Sequential()

model.add(Conv2D(32,kernel_size=(3,3),padding='valid',activation='relu',input_shape=(256,256,3)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(64,kernel_size=(3,3),padding='valid',activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(128,kernel_size=(3,3),padding='valid',activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Flatten())

model.add(Dense(128,activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(1,activation='sigmoid'))

model.summary()

# Compile the model
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

# Train the model
history = model.fit(train_ds,epochs=10,validation_data=validation_ds)

# Plot training and validation accuracy
import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()

# Plot training and validation loss
plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

import cv2

# Load a test image of a test_img1
test_img1 = cv2.imread('/content/test_img1.jpg')

test_img1.shape

# Display the test image
plt.imshow(test_img1)

# Resize and preprocess the test image
test_img1 = cv2.resize(test_img1,(256,256))

import numpy as np
test_input1 = test_img1.reshape((1, 256, 256, 3))

# Predict the class of the test image
prediction = model.predict(test_input1)

# Define a threshold for classification
threshold = 0.5

# Convert the prediction to class label
if prediction <= threshold:
    predicted_class = 'dog'
else:
    predicted_class = 'cat'

print("Predicted class:", predicted_class)

test_img2 = cv2.imread('/content/test_img2.jpg')

test_img2.shape

plt.imshow(test_img2)

test_img2 = cv2.resize(test_img2,(256,256))

test_input2 = test_img2.reshape((1, 256, 256, 3))

# Predict the class of the test image
prediction = model.predict(test_input2)

# Define a threshold for classification
threshold = 0.5

# Convert the prediction to class label
if prediction <= threshold:
    predicted_class = 'dog'
else:
    predicted_class = 'cat'

print("Predicted class:", predicted_class)

